"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.generate = void 0;
var cli_table3_1 = __importDefault(require("cli-table3"));
var chalk_1 = __importDefault(require("chalk"));
var coverageTable = new cli_table3_1["default"]({
    chars: { mid: "", "left-mid": "", "mid-mid": "", "right-mid": "" },
    colAligns: ["left", "right", "right", "right", "right"],
    style: { "padding-left": 1, "padding-right": 1 }
});
var calculatePercantage = function (correct, total) {
    if (total === 0) {
        return 100;
    }
    return (correct * 100) / total;
};
var calculatePercantageWithString = function (correct, total) {
    return calculatePercantage(correct, total).toFixed(2) + "%";
};
var generate = function (_a, threshold) {
    var fileCounts = _a.fileCounts, percentage = _a.percentage, total = _a.total, covered = _a.covered, uncovered = _a.uncovered;
    var headers = [
        "filenames" + chalk_1["default"].gray(" (" + fileCounts.size + ")"),
        "percent" + chalk_1["default"].gray(" (" + percentage.toFixed(2) + "%)"),
        "total" + chalk_1["default"].gray(" (" + total + ")"),
        "covered" + chalk_1["default"].gray(" (" + covered + ")"),
        "uncovered" + chalk_1["default"].gray(" (" + uncovered + ")")
    ];
    coverageTable.push(
    // @ts-expect-error For some reason TS doesn't narrow to horizontal table.
    headers, headers.map(function () { return chalk_1["default"].gray("---"); }));
    fileCounts.forEach(function (_a, filename) {
        var totalCount = _a.totalCount, correctCount = _a.correctCount;
        var colorCell = function (cell) {
            var color = Math.floor(calculatePercantage(correctCount, totalCount)) >= threshold
                ? chalk_1["default"].green
                : chalk_1["default"].red;
            if (typeof cell === "object" && "content" in cell) {
                return __assign(__assign({}, cell), { content: color(cell.content) });
            }
            return color(cell);
        };
        coverageTable.push(
        // @ts-expect-error For some reason TS doesn't narrow to horizontal table.
        [
            filename,
            calculatePercantageWithString(correctCount, totalCount),
            totalCount,
            correctCount,
            totalCount - correctCount
        ].map(function (val) { return colorCell(val); }));
    });
    return "" + coverageTable;
};
exports.generate = generate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvcmVwb3J0ZXJzL3RleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwREFBeUM7QUFFekMsZ0RBQTBCO0FBRTFCLElBQU0sYUFBYSxHQUFHLElBQUksdUJBQUssQ0FBQztJQUM5QixLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFO0lBQ2xFLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7SUFDdkQsS0FBSyxFQUFFLEVBQUUsY0FBYyxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFO0NBQ2pELENBQUMsQ0FBQztBQUVILElBQU0sbUJBQW1CLEdBQUcsVUFBQyxPQUFlLEVBQUUsS0FBYTtJQUN6RCxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDZixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBRUQsT0FBTyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDakMsQ0FBQyxDQUFDO0FBRUYsSUFBTSw2QkFBNkIsR0FBRyxVQUNwQyxPQUFlLEVBQ2YsS0FBYTtJQUViLE9BQVUsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBRyxDQUFDO0FBQzlELENBQUMsQ0FBQztBQUVLLElBQU0sUUFBUSxHQUFHLFVBQ3RCLEVBQW1FLEVBQ25FLFNBQWlCO1FBRGYsVUFBVSxnQkFBQSxFQUFFLFVBQVUsZ0JBQUEsRUFBRSxLQUFLLFdBQUEsRUFBRSxPQUFPLGFBQUEsRUFBRSxTQUFTLGVBQUE7SUFHbkQsSUFBTSxPQUFPLEdBQUc7UUFDZCxXQUFXLEdBQUcsa0JBQUssQ0FBQyxJQUFJLENBQUMsT0FBSyxVQUFVLENBQUMsSUFBSSxNQUFHLENBQUM7UUFDakQsU0FBUyxHQUFHLGtCQUFLLENBQUMsSUFBSSxDQUFDLE9BQUssVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBSSxDQUFDO1FBQ3RELE9BQU8sR0FBRyxrQkFBSyxDQUFDLElBQUksQ0FBQyxPQUFLLEtBQUssTUFBRyxDQUFDO1FBQ25DLFNBQVMsR0FBRyxrQkFBSyxDQUFDLElBQUksQ0FBQyxPQUFLLE9BQU8sTUFBRyxDQUFDO1FBQ3ZDLFdBQVcsR0FBRyxrQkFBSyxDQUFDLElBQUksQ0FBQyxPQUFLLFNBQVMsTUFBRyxDQUFDO0tBQzVDLENBQUM7SUFFRixhQUFhLENBQUMsSUFBSTtJQUNoQiwwRUFBMEU7SUFDMUUsT0FBTyxFQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBTSxPQUFBLGtCQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFqQixDQUFpQixDQUFDLENBQ3JDLENBQUM7SUFFRixVQUFVLENBQUMsT0FBTyxDQUNoQixVQUNFLEVBRytDLEVBQy9DLFFBQWdCO1lBSGQsVUFBVSxnQkFBQSxFQUNWLFlBQVksa0JBQUE7UUFJZCxJQUFNLFNBQVMsR0FBRyxVQUFDLElBQVU7WUFDM0IsSUFBTSxLQUFLLEdBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxTQUFTO2dCQUNwRSxDQUFDLENBQUMsa0JBQUssQ0FBQyxLQUFLO2dCQUNiLENBQUMsQ0FBQyxrQkFBSyxDQUFDLEdBQUcsQ0FBQztZQUNoQixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFO2dCQUNqRCw2QkFBWSxJQUFJLEtBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUc7YUFDbEQ7WUFFRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUM7UUFFRixhQUFhLENBQUMsSUFBSTtRQUNoQiwwRUFBMEU7UUFDMUU7WUFDRSxRQUFRO1lBQ1IsNkJBQTZCLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQztZQUN2RCxVQUFVO1lBQ1YsWUFBWTtZQUNaLFVBQVUsR0FBRyxZQUFZO1NBQzFCLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFkLENBQWMsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQyxDQUNGLENBQUM7SUFFRixPQUFPLEVBQUUsR0FBRyxhQUFhLENBQUM7QUFDNUIsQ0FBQyxDQUFDO0FBcERXLFFBQUEsUUFBUSxZQW9EbkIifQ==