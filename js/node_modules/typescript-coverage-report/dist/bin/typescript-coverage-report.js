#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var commander_1 = require("commander");
var lib_1 = __importDefault(require("../lib"));
var path_1 = __importDefault(require("path"));
var _a = require("../../package.json"), version = _a.version, description = _a.description;
var _b = require(path_1["default"].join(process.cwd(), "/package.json")).typeCoverage, typeCoverage = _b === void 0 ? {} : _b;
var argvWithVersion = function (argvs) {
    var vPos = argvs.indexOf("-v");
    if (vPos > -1) {
        argvs[vPos] = "-V";
    }
    return argvs;
};
var _c = typeCoverage.outputDir, outputDir = _c === void 0 ? "coverage-ts" : _c, _d = typeCoverage.atLeast, atLeast = _d === void 0 ? 80 : _d, _e = typeCoverage.strict, strict = _e === void 0 ? false : _e, _f = typeCoverage.debug, debug = _f === void 0 ? false : _f, _g = typeCoverage.cache, cache = _g === void 0 ? false : _g, _h = typeCoverage.project, project = _h === void 0 ? "." : _h, _j = typeCoverage.ignoreFiles, ignoreFiles = _j === void 0 ? false : _j, _k = typeCoverage.ignoreCatch, ignoreCatch = _k === void 0 ? false : _k, _l = typeCoverage.ignoreUnread, ignoreUnread = _l === void 0 ? false : _l;
commander_1.program
    .version(version)
    .description(description)
    .option("-o, --outputDir [string]", "the output directory where to generate the report.", outputDir)
    .option("-t, --threshold [number]", "the minimum percentage of coverage required.", parseFloat, atLeast)
    .option("-s, --strict [boolean]", "run the check in strict mode.", strict)
    .option("-d, --debug [boolean]", "show debug information.", debug)
    .option("-c, --cache [boolean]", "save and reuse type check result from cache.", cache)
    .option("-p, --project [string]", 'file path to tsconfig file, eg: --project "./app/tsconfig.app.json"', project)
    .option("-i, --ignore-files [string[]]", 'ignore specified files, eg: --ignore-files "demo1/*.ts" --ignore-files "demo2/foo.ts"', ignoreFiles)
    .option("--ignore-catch [boolean]", "ignore type any for (try-)catch clause variable", ignoreCatch)
    .option("-u, --ignore-unread [boolean]", "allow writes to variables with implicit any types", ignoreUnread)
    .parse(argvWithVersion(process.argv));
var options = {
    /* camelCase keys matching "long" flags in options above */
    outputDir: commander_1.program.outputDir,
    threshold: commander_1.program.threshold,
    tsProjectFile: commander_1.program.project,
    strict: commander_1.program.strict,
    debug: commander_1.program.debug,
    cache: commander_1.program.cache,
    ignoreFiles: commander_1.program.ignoreFiles,
    ignoreCatch: commander_1.program.ignoreCatch,
    ignoreUnread: commander_1.program.ignoreUnread
};
lib_1["default"](options)
    .then(function (_a) {
    var percentage = _a.percentage;
    if (percentage < options.threshold) {
        console.error("\nThe TypeScript coverage " + percentage.toFixed(2) + "% is lower than the threshold " + options.threshold + "%");
        process.exit(2);
    }
    process.exit(0);
})["catch"](function (error) {
    console.error(error);
    process.exit(255);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC1jb3ZlcmFnZS1yZXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmluL3R5cGVzY3JpcHQtY292ZXJhZ2UtcmVwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLHVDQUFvQztBQUNwQywrQ0FBZ0U7QUFDaEUsOENBQXdCO0FBZWxCLElBQUEsS0FJUyxPQUFPLENBQUMsb0JBQW9CLENBQUMsRUFIMUMsT0FBTyxhQUFBLEVBQ1AsV0FBVyxpQkFFK0IsQ0FBQztBQUczQyxJQUFBLEtBRXFELE9BQU8sQ0FBQyxpQkFBSSxDQUFDLElBQUksQ0FDdEUsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUNiLGVBQWUsQ0FDaEIsQ0FBQyxhQUxpQixFQUFqQixZQUFZLG1CQUFHLEVBQUUsS0FBQSxDQUtoQjtBQUVILElBQU0sZUFBZSxHQUFHLFVBQUMsS0FBZTtJQUN0QyxJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWpDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ2IsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztLQUNwQjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBR0EsSUFBQSxLQVNFLFlBQVksVUFUVyxFQUF6QixTQUFTLG1CQUFHLGFBQWEsS0FBQSxFQUN6QixLQVFFLFlBQVksUUFSRixFQUFaLE9BQU8sbUJBQUcsRUFBRSxLQUFBLEVBQ1osS0FPRSxZQUFZLE9BUEEsRUFBZCxNQUFNLG1CQUFHLEtBQUssS0FBQSxFQUNkLEtBTUUsWUFBWSxNQU5ELEVBQWIsS0FBSyxtQkFBRyxLQUFLLEtBQUEsRUFDYixLQUtFLFlBQVksTUFMRCxFQUFiLEtBQUssbUJBQUcsS0FBSyxLQUFBLEVBQ2IsS0FJRSxZQUFZLFFBSkQsRUFBYixPQUFPLG1CQUFHLEdBQUcsS0FBQSxFQUNiLEtBR0UsWUFBWSxZ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